plugins {
    id 'java'
    id 'idea'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
}

group = 'org.radarbase'
version = '1.0.5-SNAPSHOT'

application {
    mainClass = 'org.radarbase.redcap.webapp.GrizzlyServer'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/kotlin'
        }
        kotlin {
            srcDirs += 'src/main/kotlin'
        }
    }
    test {
        java {
            srcDirs += 'src/test/kotlin'
        }
        kotlin {
            srcDirs += 'src/test/kotlin'
        }
    }
    integrationTest {
        java {
            srcDirs += 'src/integration-test/kotlin'
            compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
            runtimeClasspath += output + compileClasspath + configurations.testRuntimeClasspath
        }
        resources {
            srcDirs += 'src/integration-test/resources'
        }
    }
}

configurations {
    codacy
    provided
    compileClasspath {
        extendsFrom(provided)
    }
}

ext {
    apacheCommonsIoVersion = '2.5'
    apacheCommonsLangVersion = '3.6'
    jerseyVersion = '2.31'
    jerseymediaVersion = '2.30.1'
    junitVersion = '4.12'
    logbackVersion = '1.2.3'
    okhttp3Version = '4.9.3'
    radarOauthClientVersion = '0.8.0'
    grizzlyVersion = '2.4.4'
    jacksonVersion = '2.16.1'
}

dependencies {
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    runtimeOnly "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseymediaVersion"
    implementation "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    implementation "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
    implementation "org.glassfish.grizzly:grizzly-http-server:$grizzlyVersion"
    implementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion"
    implementation "org.radarbase:oauth-client-util:$radarOauthClientVersion"
    implementation "commons-io:commons-io:$apacheCommonsIoVersion"
    implementation "org.apache.commons:commons-lang3:$apacheCommonsLangVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3Version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "org.json:json:20170516"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
}

checkstyle {
    toolVersion = '8.46'
    ignoreFailures = false
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
}

pmd {
    toolVersion = '6.44.0'
    ignoreFailures = false
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
    consoleOutput = true
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

tasks.named('pmdTest') {
    ruleSetFiles = files("config/pmd/test_ruleset.xml")
}

idea {
    module {
        downloadSources = true
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

tasks.named('wrapper') {
    gradleVersion = '7.4'
}

tasks.withType(Tar) {
    compression = Compression.GZIP
    extension = "tar"
}

test {
    testLogging {
        events("skipped", "failed")
    }
}

tasks.register('downloadApplicationDependencies') {
    description = "Pre-downloads application dependencies"
    doLast {
        configurations.compileClasspath.getFiles()
        configurations.runtimeClasspath.getFiles()
    }
}

tasks.register('integrationTest', Test) {
    description = "Run integration tests (located in src/integrationTest/...)."
    dependsOn('installMP', 'copyConf')
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    exclude("**/*IntegratorTest*", "**/*MpClientTest*", "**/*EntryPointTest*")
    testLogging {
        events("skipped", "failed", "passed", "STANDARD_OUT", "STANDARD_ERROR")
    }
}

tasks.named('integrationTest') {
    finalizedBy('removeLock')
}

def sudoLinux = System.properties['os.name'].toLowerCase().contains('linux') ? ['sudo'] : []
def lock = 'src/integration-test/.RUNNING_INSTANCE_LOCK'

tasks.register('installMP', Exec) {
    doFirst {
        def lockFile = new File(lock)
        if (lockFile.exists()) {
            throw new GradleException("A previous instance of the management portal is still running. Please stop it first and then try again.")
        } else {
            lockFile.createNewFile()
        }
    }
    workingDir = file('src/integration-test/')
    standardInput = System.in
    commandLine = sudoLinux + ['docker-compose', 'up', '-d', '--build', '--force-recreate']
    doLast {
        Thread.sleep(60_000)
    }
}

tasks.register('removeLock', Exec) {
    workingDir = file('src/integration-test/')
    commandLine = sudoLinux + ['docker-compose', 'down']
    doLast {
        new File(lock).delete()
    }
}

tasks.register('copyConf', Copy) {
    from = "src/integration-test/resources/radar.yml"
    into = "/usr/local/etc/radar-redcap-int/"
    filter { String line ->
        line.replace("  base_url: http://managementportal-app:8090/",
                     "  base_url: http://localhost:8090/")
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = "11"
    }
}
